[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["../assets"]

project.ext.mainClassName = "cn.harryh.arkpets.DesktopLauncher"
project.ext.assetsDir = new File("../assets")
eclipse.project.name = appName + "-desktop"

import org.gradle.internal.os.OperatingSystem

processResources {
    includeEmptyDirs = false
    excludes = [
            "**/models_enemies/**",
            "**/models/**",
            "**/logs/**",
            "models_data.json"
    ]
}

// Runs the app without debug.
task run(dependsOn: classes, type: JavaExec, group: 'execute') {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        jvmArgs += "-XstartOnFirstThread" // Required to run on macOS
    }
}

// Runs the app within debug.
task debug(dependsOn: classes, type: JavaExec, group: 'execute') {
    mainClass = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}


/* DISTRIBUTION TASKS */

ext {
    // Environment vars
    rootDir = file('.').absolutePath
    javaHome = System.getProperty('java.home')
    osName = System.getProperty('os.name').toLowerCase(Locale.ROOT).split(' ')[0]
    osPathSep = File.pathSeparatorChar
    // Distribution related vars
    jarLibDir = "${buildDir}/libs"
    jarLibName = "${project.name}-${project.version}"
    jlinkRuntimeDir = "${buildDir}/jlink"
    jlinkRuntimeImg = "${jlinkRuntimeDir}/runtime"
    jlinkModuleList = "java.base,java.desktop,java.logging,java.management,java.scripting,jdk.crypto.ec,jdk.localedata,jdk.unsupported"
    jlinkLocalesList = "en-US,zh-CN"
    jpackageDir = "${buildDir}/jpackage"
    issFileRel = "docs/scripts/ExePacking.iss"
    distDir = "${buildDir}/dist"
    distName = "${project.ext.appName}-v${project.version}"
}

// Generates a distributable JAR file for the app.
task distJar(dependsOn: classes, type: Jar, group: 'dist') {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
    doLast() {
        copy {
            from "${jarLibDir}/${jarLibName}.jar"
            into distDir
            rename "${jarLibName}.jar", "${distName}.jar"
        }
    }
}

// Creates a customized Java Runtime Environment for the app.
task jlink(dependsOn: distJar, type: Exec, group: 'dist') {
    doFirst() { delete jlinkRuntimeDir }
    workingDir project.projectDir
    inputs.property("runtime", jlinkRuntimeImg)
    commandLine = [
            "${javaHome}/bin/jlink",
            '--module-path', "${javaHome}/jmods",
            '--add-modules', jlinkModuleList,
            '--output', jlinkRuntimeImg,
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--vm=server',
            '--compress=1',
            '--include-locales', jlinkLocalesList
    ] as List<String>
    outputs.dir(jlinkRuntimeDir)
}

// Packs the app into an EXE.
task jpackage(dependsOn: jlink, type: Exec, group: 'dist') {
    doFirst() {
        fileTree(jarLibDir).size()
        if (fileTree(jarLibDir).size() > 1)
            throw new RuntimeException("There may be legacy jars in the libs dir, please run 'clean' first.")
        delete jpackageDir
    }
    doLast() {
        copy {
            from "${project.rootDir}/LICENSE"
            into jpackageDir
        }
        delete jlinkRuntimeDir
    }
    workingDir project.projectDir
    def commands = [
            "${javaHome}/bin/jpackage",
            '--input', jarLibDir,
            '--dest', jpackageDir,
            '--type', 'app-image',
            '--name', project.appName,
            '--vendor', project.appAuthor,
            '--app-version', project.version,
            '--main-class', project.mainClassName,
            '--main-jar', jar.archiveFile.get().asFile.getName(),
            '--runtime-image', jlinkRuntimeImg
    ]
    if (osName.contains('windows')) {
        commands << '--icon'
        commands << "${project.assetsDir}/icons/icon.ico"
    } else if (osName.contains('linux')) {
        commands << '--icon'
        commands << "${project.assetsDir}/icons/icon.png"
    } else if (osName.contains('mac')) {
        commands << '--java-options'
        commands << "-XstartOnFirstThread"
    }
    commandLine = commands
}

// Generates a distributable ZIP file for the app.
task distZip(dependsOn: jpackage, type: Zip, group: 'dist') {
    from(jpackageDir) { include("**") }
    from(project.rootDir) { include("README.md") }
    archiveFileName = "${distName}.zip"
    destinationDirectory = file(distDir)
}

// Generates a distributable EXE file for the app, using Inno Setup.
// Note that you must install Inno Setup in your environment and add it to PATH before running this task.
task distExe(dependsOn: jpackage, type: Exec, group: 'dist') {
    workingDir project.rootDir
    def commands = [
            "iscc",
            "/Q",
            issFileRel
    ]
    commandLine = commands
}

// Generates ALL kinds of distributing files.
task distAll(dependsOn: [distJar, distZip, distExe], group: 'dist') {
    doLast() {
        println("All files were successfully generated, see: ${new File(distDir as String).absolutePath}")
        try {
            delete "${buildDir}/tmp"
            delete jpackageDir
            delete jarLibDir
        } catch (Exception ignored) {
            println("Unable to delete temp files.")
        }
    }
}
